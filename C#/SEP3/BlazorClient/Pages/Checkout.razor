@page "/Checkout"
@using global::Shared
@using BlazorClient.Services.ClientInterfaces
@using global::Shared.DTOs
@inject IOrderItemService orderItemService
@inject IOrderService orderService
@inject IReceiptService receiptService
@using UIComponents
@inject NavigationManager navMgr

<h3>Checkout</h3>
@if (!string.IsNullOrEmpty(msg))
            {
                <div>
                    <span>@msg</span>
                </div>
            }
@if (orderItems == null)
            {
                <span>Loading..</span>
            }
            else if (!orderItems.Any())
            {
                <span>No products to be found in your shopping cart</span>
            }
            else
            {
                <div class="container">
                <form action="">
                    <h1>
                        <i class="fas fa-shipping-fast"></i>
                        Shipping Details
                    </h1>
                    <div class="street">
                        <label for="address">Street</label>
                        <input type="text" name="address" @bind="street" @bind:event="oninput">
                    </div>
                    <div class="address-info">
                        <div>
                            <label for="city">City</label>
                            <input type="text" name="city" @bind="city" @bind:event="oninput">
                        </div>
                        <div>
                            <label for="zip">Zip</label>
                            <input type="text" name="zip" @bind="zip" @bind:event="oninput">
                        </div>
                    </div>
                </form>
                </div>
                <div class="order-container">
                    @foreach (OrderItem orderItem in orderItems)
                    {
                        <div class="row border-top border-bottom">
                            <div class="row main align-items-center">
                                <div class="col-2"><img class="card-img-top img-thumbnail"  src="https://i.pinimg.com/564x/a3/6b/42/a36b422bb2bebcbd77bba846b83ddf5d.jpg" alt="Card image cap"></div>
                                <div class="col">
                                    <div class="row text-muted">@orderItem.product.name</div>
                                    <div class="row">@orderItem.product.description</div>
                                </div>
                                <div class="col">
                                    <a href="#" class="border">@orderItem.quantity</a>
                                </div>
                                <div class="col">&euro; @orderItem.price</div>
                            </div>
                        </div>
                    }
                </div>
                <div class="col-md-4 summary">
                    <div><h5><b>Summary</b></h5></div>
                    <hr>
                    <div class="row">
                        <div class="col" style="padding-left:0;">ITEMS @orderItems.Count()</div>
                    </div>
                    <div class="row" style="border-top: 1px solid rgba(0,0,0,.1); padding: 2vh 0;">
                        <div class="col">TOTAL PRICE</div>
                        <div class="col text-right">&euro; @price</div>
                    </div>
                    <button class="btn" @onclick="MakeOrder">Buy</button>
                </div>
                
                <Modal ShowModal="showModal">
                    <p>A receipt of your order has been created! You can view all your receipts in your profile!</p>
                    <button @onclick="@Proceed">Wonderful</button>
                </Modal>
            }

@code {
    private IEnumerable<OrderItem>? orderItems;
    private OrderItem[]? list;
    private string msg = "";
    private string street = "";
    private string city = "";
    private string zip = "";
    private string address = "";
    private double price;
    private bool showModal;
    private Order order = null;
    private Receipt receipt = null;
    private User userTest = new User()
    {
        username = "Ana",
        name = "Ana"
    };
    
    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            orderItems = await orderItemService.GetOrderItem();
            foreach (var order in orderItems)
            {
                price =+ order.price;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    public async Task MakeOrder()
    {
        msg = "";
        try
        {
            List<long> items = new List<long>();
            foreach (var order in orderItems)
            {
                items.Add(order.id);
            }
            address = street + " " + city + " " + zip;

            OrderCreationDto dto = new OrderCreationDto(address, items);
            order=await orderService.CreateAsync(dto);
            ReceiptCreationDto receiptDto = new ReceiptCreationDto(userTest.username, order.Id);//username should come from authentication not be 1 by default
            receipt = await receiptService.CreateAsync(receiptDto);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private void Proceed()
    {
        showModal = false;
        navMgr.NavigateTo("/ViewProducts");
    }
    
}